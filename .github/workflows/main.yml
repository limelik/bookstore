name: CI Pipeline - Build, Scan & Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  docker-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch that sweet repo code
        uses: actions/checkout@v3

      - name: Fire up the Server Image
        run: docker build -f server/Dockerfile.dev -t bookstore_server:latest server
      
      - name: Fire up the Client Image
        run: docker build -f client/Dockerfile.dev -t bookstore_client:latest client
      
      - name: Fire up the Nginx Image
        run: docker build -f nginx/Dockerfile.dev -t bookstore_nginx:latest nginx

      - name: Scanning Server Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_server:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Scanning Client Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_client:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Scanning Nginx Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_nginx:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Setting Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Logging into AWS ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Tag & Push Server Image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_SERVER: ${{ secrets.ECR_REPOSITORY_SERVER }}
        run: |
          docker tag bookstore_server:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVER:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVER:latest

      - name: Tag & Push Client Image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_CLIENT: ${{ secrets.ECR_REPOSITORY_CLIENT }}
        run: |
          docker tag bookstore_client:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENT:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENT:latest

      - name: Tag & Push Nginx Image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NGINX: ${{ secrets.ECR_REPOSITORY_NGINX }}
        run: |
          docker tag bookstore_nginx:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NGINX:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NGINX:latest

      - name: Set up SSH key
        run: |
          echo "${{ secrets.MY_SSH_KEY }}" > ~/.ssh/my-key-pair.pem
          chmod 600 ~/.ssh/my-key-pair.pem

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key-pair.pem docker-compose.yml ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/

      - name: Install Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key-pair.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} "
            sudo curl -L https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose &&
            sudo chmod +x /usr/local/bin/docker-compose"

      - name: Authenticate Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key-pair.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} "
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

      - name: Pull Docker Images on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key-pair.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} "
            cd /home/ubuntu && docker-compose pull"

      - name: Run application via docker-compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key-pair.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} "
            cd /home/ubuntu && docker-compose up -d"