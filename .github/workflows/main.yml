name: CI Pipeline - Build, Scan & Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  docker-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch that sweet repo code
        uses: actions/checkout@v3

      - name: Build Server Image
        run: docker build -f server/Dockerfile.dev -t bookstore_server:latest server

      - name: Build Client Image
        run: docker build -f client/Dockerfile.dev -t bookstore_client:latest client

      - name: Build Nginx Image
        run: docker build -f nginx/Dockerfile.dev -t bookstore_nginx:latest nginx

      # - name: Scanning Server Image (Trivy)
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: bookstore_server:latest
      #     format: 'table'
      #     ignore-unfixed: true
      #   continue-on-error: true

      # - name: Scanning Client Image (Trivy)
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: bookstore_client:latest
      #     format: 'table'
      #     ignore-unfixed: true
      #   continue-on-error: true

      # - name: Scanning Nginx Image (Trivy)
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: bookstore_nginx:latest
      #     format: 'table'
      #     ignore-unfixed: true
      #   continue-on-error: true

      - name: Setting Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Logging into AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # - name: Tag & Push Server Image
      #   run: |
      #     docker tag bookstore_server:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_SERVER }}:latest
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_SERVER }}:latest

      # - name: Tag & Push Client Image
      #   run: |
      #     docker tag bookstore_client:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_CLIENT }}:latest
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_CLIENT }}:latest

      # - name: Tag & Push Nginx Image
      #   run: |
      #     docker tag bookstore_nginx:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NGINX }}:latest
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NGINX }}:latest

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > my-key-pair.pem
          chmod 600 my-key-pair.pem

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i my-key-pair.pem docker-compose.yml ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/app/

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            sudo apt-get update
            sudo apt-get install -y unzip

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            cd /home/ubuntu/app
            docker compose down
            docker compose pull
            docker compose up -d